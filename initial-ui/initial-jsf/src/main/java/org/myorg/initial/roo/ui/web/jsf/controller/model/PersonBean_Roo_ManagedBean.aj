// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.myorg.initial.roo.ui.web.jsf.controller.model;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.RegexValidator;
import org.myorg.initial.roo.core.domain.model.Person;
import org.myorg.initial.roo.core.domain.reference.CountryEnum;
import org.myorg.initial.roo.core.domain.reference.SemanticQuestionEnum;
import org.myorg.initial.roo.core.domain.security.Principal;
import org.myorg.initial.roo.core.service.model.PersonService;
import org.myorg.initial.roo.core.service.security.PrincipalService;
import org.myorg.initial.roo.ui.web.jsf.controller.model.PersonBean;
import org.myorg.initial.roo.ui.web.jsf.controller.security.converter.PrincipalConverter;
import org.myorg.initial.roo.ui.web.jsf.controller.model.util.MessageFactory;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.commandbutton.CommandButton;
import org.primefaces.component.filedownload.FileDownloadActionListener;
import org.primefaces.component.fileupload.FileUpload;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.springframework.beans.factory.annotation.Autowired;

privileged aspect PersonBean_Roo_ManagedBean {
    
    declare @type: PersonBean: @ManagedBean(name = "personBean");
    
    declare @type: PersonBean: @SessionScoped;
    
    @Autowired
    PersonService PersonBean.personService;
    
    @Autowired
    PrincipalService PersonBean.principalService;
    
    private String PersonBean.name = "People";
    
    private Person PersonBean.person;
    
    private List<Person> PersonBean.allPeople;
    
    private boolean PersonBean.dataVisible = false;
    
    private List<String> PersonBean.columns;
    
    private HtmlPanelGrid PersonBean.createPanelGrid;
    
    private HtmlPanelGrid PersonBean.editPanelGrid;
    
    private HtmlPanelGrid PersonBean.viewPanelGrid;
    
    private boolean PersonBean.createDialogVisible = false;
    
    @PostConstruct
    public void PersonBean.init() {
        columns = new ArrayList<String>();
        columns.add("firstName");
        columns.add("lastName");
        columns.add("lastName2");
        columns.add("birthDate");
        columns.add("nIF");
    }
    
    public String PersonBean.getName() {
        return name;
    }
    
    public List<String> PersonBean.getColumns() {
        return columns;
    }
    
    public List<Person> PersonBean.getAllPeople() {
        return allPeople;
    }
    
    public void PersonBean.setAllPeople(List<Person> allPeople) {
        this.allPeople = allPeople;
    }
    
    public String PersonBean.findAllPeople() {
        allPeople = personService.findAllPeople();
        dataVisible = !allPeople.isEmpty();
        return null;
    }
    
    public boolean PersonBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PersonBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PersonBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PersonBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PersonBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PersonBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel firstNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        firstNameCreateOutput.setFor("firstNameCreateInput");
        firstNameCreateOutput.setId("firstNameCreateOutput");
        firstNameCreateOutput.setValue("First Name:");
        htmlPanelGrid.getChildren().add(firstNameCreateOutput);
        
        InputTextarea firstNameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        firstNameCreateInput.setId("firstNameCreateInput");
        firstNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.firstName}", String.class));
        LengthValidator firstNameCreateInputValidator = new LengthValidator();
        firstNameCreateInputValidator.setMinimum(1);
        firstNameCreateInputValidator.setMaximum(50);
        firstNameCreateInput.addValidator(firstNameCreateInputValidator);
        firstNameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstNameCreateInput);
        
        Message firstNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstNameCreateInputMessage.setId("firstNameCreateInputMessage");
        firstNameCreateInputMessage.setFor("firstNameCreateInput");
        firstNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstNameCreateInputMessage);
        
        OutputLabel lastNameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastNameCreateOutput.setFor("lastNameCreateInput");
        lastNameCreateOutput.setId("lastNameCreateOutput");
        lastNameCreateOutput.setValue("Last Name:");
        htmlPanelGrid.getChildren().add(lastNameCreateOutput);
        
        InputTextarea lastNameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        lastNameCreateInput.setId("lastNameCreateInput");
        lastNameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.lastName}", String.class));
        LengthValidator lastNameCreateInputValidator = new LengthValidator();
        lastNameCreateInputValidator.setMinimum(1);
        lastNameCreateInputValidator.setMaximum(50);
        lastNameCreateInput.addValidator(lastNameCreateInputValidator);
        lastNameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastNameCreateInput);
        
        Message lastNameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastNameCreateInputMessage.setId("lastNameCreateInputMessage");
        lastNameCreateInputMessage.setFor("lastNameCreateInput");
        lastNameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastNameCreateInputMessage);
        
        OutputLabel lastName2CreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastName2CreateOutput.setFor("lastName2CreateInput");
        lastName2CreateOutput.setId("lastName2CreateOutput");
        lastName2CreateOutput.setValue("Last Name2:");
        htmlPanelGrid.getChildren().add(lastName2CreateOutput);
        
        InputTextarea lastName2CreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        lastName2CreateInput.setId("lastName2CreateInput");
        lastName2CreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.lastName2}", String.class));
        LengthValidator lastName2CreateInputValidator = new LengthValidator();
        lastName2CreateInputValidator.setMinimum(1);
        lastName2CreateInputValidator.setMaximum(50);
        lastName2CreateInput.addValidator(lastName2CreateInputValidator);
        lastName2CreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastName2CreateInput);
        
        Message lastName2CreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastName2CreateInputMessage.setId("lastName2CreateInputMessage");
        lastName2CreateInputMessage.setFor("lastName2CreateInput");
        lastName2CreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastName2CreateInputMessage);
        
        OutputLabel birthDateCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        birthDateCreateOutput.setFor("birthDateCreateInput");
        birthDateCreateOutput.setId("birthDateCreateOutput");
        birthDateCreateOutput.setValue("Birth Date:");
        htmlPanelGrid.getChildren().add(birthDateCreateOutput);
        
        Calendar birthDateCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        birthDateCreateInput.setId("birthDateCreateInput");
        birthDateCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.birthDate}", Date.class));
        birthDateCreateInput.setNavigator(true);
        birthDateCreateInput.setEffect("slideDown");
        birthDateCreateInput.setPattern("dd/MM/yyyy");
        birthDateCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(birthDateCreateInput);
        
        Message birthDateCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        birthDateCreateInputMessage.setId("birthDateCreateInputMessage");
        birthDateCreateInputMessage.setFor("birthDateCreateInput");
        birthDateCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(birthDateCreateInputMessage);
        
        OutputLabel nationalityCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nationalityCreateOutput.setFor("nationalityCreateInput");
        nationalityCreateOutput.setId("nationalityCreateOutput");
        nationalityCreateOutput.setValue("Nationality:");
        htmlPanelGrid.getChildren().add(nationalityCreateOutput);
        
        AutoComplete nationalityCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        nationalityCreateInput.setId("nationalityCreateInput");
        nationalityCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.nationality}", CountryEnum.class));
        nationalityCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeNationality}", List.class, new Class[] { String.class }));
        nationalityCreateInput.setDropdown(true);
        nationalityCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nationalityCreateInput);
        
        Message nationalityCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nationalityCreateInputMessage.setId("nationalityCreateInputMessage");
        nationalityCreateInputMessage.setFor("nationalityCreateInput");
        nationalityCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nationalityCreateInputMessage);
        
        OutputLabel nIFCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nIFCreateOutput.setFor("nIFCreateInput");
        nIFCreateOutput.setId("nIFCreateOutput");
        nIFCreateOutput.setValue("N I F:");
        htmlPanelGrid.getChildren().add(nIFCreateOutput);
        
        InputText nIFCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nIFCreateInput.setId("nIFCreateInput");
        nIFCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.nIF}", String.class));
        LengthValidator nIFCreateInputValidator = new LengthValidator();
        nIFCreateInputValidator.setMinimum(9);
        nIFCreateInputValidator.setMaximum(15);
        nIFCreateInput.addValidator(nIFCreateInputValidator);
        RegexValidator nIFCreateInputRegexValidator = new RegexValidator();
        nIFCreateInputRegexValidator.setPattern("([X-Z]{1}\\d{7}[A-Z]{1})|(\\d{8}[A-Z]{1})");
        nIFCreateInput.addValidator(nIFCreateInputRegexValidator);
        nIFCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nIFCreateInput);
        
        Message nIFCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nIFCreateInputMessage.setId("nIFCreateInputMessage");
        nIFCreateInputMessage.setFor("nIFCreateInput");
        nIFCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nIFCreateInputMessage);
        
        OutputLabel photoFileCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        photoFileCreateOutput.setFor("photoFileCreateInput");
        photoFileCreateOutput.setId("photoFileCreateOutput");
        photoFileCreateOutput.setValue("Photo File:");
        htmlPanelGrid.getChildren().add(photoFileCreateOutput);
        
        FileUpload photoFileCreateInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        photoFileCreateInput.setId("photoFileCreateInput");
        photoFileCreateInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{personBean.handleFileUploadForPhotoFile}", void.class, new Class[] { FileUploadEvent.class }));
        photoFileCreateInput.setMode("advanced");
        photoFileCreateInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        photoFileCreateInput.setUpdate(":growlForm:growl");
        photoFileCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(photoFileCreateInput);
        
        Message photoFileCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        photoFileCreateInputMessage.setId("photoFileCreateInputMessage");
        photoFileCreateInputMessage.setFor("photoFileCreateInput");
        photoFileCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(photoFileCreateInputMessage);
        
        OutputLabel phoneCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        phoneCreateOutput.setFor("phoneCreateInput");
        phoneCreateOutput.setId("phoneCreateOutput");
        phoneCreateOutput.setValue("Phone:");
        htmlPanelGrid.getChildren().add(phoneCreateOutput);
        
        InputText phoneCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        phoneCreateInput.setId("phoneCreateInput");
        phoneCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.phone}", String.class));
        LengthValidator phoneCreateInputValidator = new LengthValidator();
        phoneCreateInputValidator.setMinimum(3);
        phoneCreateInputValidator.setMaximum(15);
        phoneCreateInput.addValidator(phoneCreateInputValidator);
        RegexValidator phoneCreateInputRegexValidator = new RegexValidator();
        phoneCreateInputRegexValidator.setPattern(".*\\d.*");
        phoneCreateInput.addValidator(phoneCreateInputRegexValidator);
        phoneCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(phoneCreateInput);
        
        Message phoneCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        phoneCreateInputMessage.setId("phoneCreateInputMessage");
        phoneCreateInputMessage.setFor("phoneCreateInput");
        phoneCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(phoneCreateInputMessage);
        
        OutputLabel questionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        questionCreateOutput.setFor("questionCreateInput");
        questionCreateOutput.setId("questionCreateOutput");
        questionCreateOutput.setValue("Question:");
        htmlPanelGrid.getChildren().add(questionCreateOutput);
        
        AutoComplete questionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        questionCreateInput.setId("questionCreateInput");
        questionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.question}", SemanticQuestionEnum.class));
        questionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeQuestion}", List.class, new Class[] { String.class }));
        questionCreateInput.setDropdown(true);
        questionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(questionCreateInput);
        
        Message questionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        questionCreateInputMessage.setId("questionCreateInputMessage");
        questionCreateInputMessage.setFor("questionCreateInput");
        questionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(questionCreateInputMessage);
        
        OutputLabel responseCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responseCreateOutput.setFor("responseCreateInput");
        responseCreateOutput.setId("responseCreateOutput");
        responseCreateOutput.setValue("Response:");
        htmlPanelGrid.getChildren().add(responseCreateOutput);
        
        InputTextarea responseCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        responseCreateInput.setId("responseCreateInput");
        responseCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.response}", String.class));
        LengthValidator responseCreateInputValidator = new LengthValidator();
        responseCreateInputValidator.setMinimum(3);
        responseCreateInputValidator.setMaximum(100);
        responseCreateInput.addValidator(responseCreateInputValidator);
        responseCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(responseCreateInput);
        
        Message responseCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responseCreateInputMessage.setId("responseCreateInputMessage");
        responseCreateInputMessage.setFor("responseCreateInput");
        responseCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responseCreateInputMessage);
        
        OutputLabel alternateQuestionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        alternateQuestionCreateOutput.setFor("alternateQuestionCreateInput");
        alternateQuestionCreateOutput.setId("alternateQuestionCreateOutput");
        alternateQuestionCreateOutput.setValue("Alternate Question:");
        htmlPanelGrid.getChildren().add(alternateQuestionCreateOutput);
        
        InputTextarea alternateQuestionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        alternateQuestionCreateInput.setId("alternateQuestionCreateInput");
        alternateQuestionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.alternateQuestion}", String.class));
        LengthValidator alternateQuestionCreateInputValidator = new LengthValidator();
        alternateQuestionCreateInputValidator.setMinimum(3);
        alternateQuestionCreateInputValidator.setMaximum(100);
        alternateQuestionCreateInput.addValidator(alternateQuestionCreateInputValidator);
        alternateQuestionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(alternateQuestionCreateInput);
        
        Message alternateQuestionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        alternateQuestionCreateInputMessage.setId("alternateQuestionCreateInputMessage");
        alternateQuestionCreateInputMessage.setFor("alternateQuestionCreateInput");
        alternateQuestionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(alternateQuestionCreateInputMessage);
        
        OutputLabel alternateResponseCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        alternateResponseCreateOutput.setFor("alternateResponseCreateInput");
        alternateResponseCreateOutput.setId("alternateResponseCreateOutput");
        alternateResponseCreateOutput.setValue("Alternate Response:");
        htmlPanelGrid.getChildren().add(alternateResponseCreateOutput);
        
        InputTextarea alternateResponseCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        alternateResponseCreateInput.setId("alternateResponseCreateInput");
        alternateResponseCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.alternateResponse}", String.class));
        LengthValidator alternateResponseCreateInputValidator = new LengthValidator();
        alternateResponseCreateInputValidator.setMinimum(3);
        alternateResponseCreateInputValidator.setMaximum(100);
        alternateResponseCreateInput.addValidator(alternateResponseCreateInputValidator);
        alternateResponseCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(alternateResponseCreateInput);
        
        Message alternateResponseCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        alternateResponseCreateInputMessage.setId("alternateResponseCreateInputMessage");
        alternateResponseCreateInputMessage.setFor("alternateResponseCreateInput");
        alternateResponseCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(alternateResponseCreateInputMessage);
        
        OutputLabel principalCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        principalCreateOutput.setFor("principalCreateInput");
        principalCreateOutput.setId("principalCreateOutput");
        principalCreateOutput.setValue("Principal:");
        htmlPanelGrid.getChildren().add(principalCreateOutput);
        
        AutoComplete principalCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        principalCreateInput.setId("principalCreateInput");
        principalCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.principal}", Principal.class));
        principalCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completePrincipal}", List.class, new Class[] { String.class }));
        principalCreateInput.setDropdown(true);
        principalCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "principal", String.class));
        principalCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{principal.userName} #{principal.password} #{principal.activationKey}", String.class));
        principalCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{principal}", Principal.class));
        principalCreateInput.setConverter(new PrincipalConverter());
        principalCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(principalCreateInput);
        
        Message principalCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        principalCreateInputMessage.setId("principalCreateInputMessage");
        principalCreateInputMessage.setFor("principalCreateInput");
        principalCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(principalCreateInputMessage);
        
        OutputLabel addressesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressesCreateOutput.setFor("addressesCreateInput");
        addressesCreateOutput.setId("addressesCreateOutput");
        addressesCreateOutput.setValue("Addresses:");
        htmlPanelGrid.getChildren().add(addressesCreateOutput);
        
        InputText addressesCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        addressesCreateInput.setId("addressesCreateInput");
        addressesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.addresses}", List.class));
        addressesCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(addressesCreateInput);
        
        Message addressesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressesCreateInputMessage.setId("addressesCreateInputMessage");
        addressesCreateInputMessage.setFor("addressesCreateInput");
        addressesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressesCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel firstNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        firstNameEditOutput.setFor("firstNameEditInput");
        firstNameEditOutput.setId("firstNameEditOutput");
        firstNameEditOutput.setValue("First Name:");
        htmlPanelGrid.getChildren().add(firstNameEditOutput);
        
        InputTextarea firstNameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        firstNameEditInput.setId("firstNameEditInput");
        firstNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.firstName}", String.class));
        LengthValidator firstNameEditInputValidator = new LengthValidator();
        firstNameEditInputValidator.setMinimum(1);
        firstNameEditInputValidator.setMaximum(50);
        firstNameEditInput.addValidator(firstNameEditInputValidator);
        firstNameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(firstNameEditInput);
        
        Message firstNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        firstNameEditInputMessage.setId("firstNameEditInputMessage");
        firstNameEditInputMessage.setFor("firstNameEditInput");
        firstNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(firstNameEditInputMessage);
        
        OutputLabel lastNameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastNameEditOutput.setFor("lastNameEditInput");
        lastNameEditOutput.setId("lastNameEditOutput");
        lastNameEditOutput.setValue("Last Name:");
        htmlPanelGrid.getChildren().add(lastNameEditOutput);
        
        InputTextarea lastNameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        lastNameEditInput.setId("lastNameEditInput");
        lastNameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.lastName}", String.class));
        LengthValidator lastNameEditInputValidator = new LengthValidator();
        lastNameEditInputValidator.setMinimum(1);
        lastNameEditInputValidator.setMaximum(50);
        lastNameEditInput.addValidator(lastNameEditInputValidator);
        lastNameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastNameEditInput);
        
        Message lastNameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastNameEditInputMessage.setId("lastNameEditInputMessage");
        lastNameEditInputMessage.setFor("lastNameEditInput");
        lastNameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastNameEditInputMessage);
        
        OutputLabel lastName2EditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        lastName2EditOutput.setFor("lastName2EditInput");
        lastName2EditOutput.setId("lastName2EditOutput");
        lastName2EditOutput.setValue("Last Name2:");
        htmlPanelGrid.getChildren().add(lastName2EditOutput);
        
        InputTextarea lastName2EditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        lastName2EditInput.setId("lastName2EditInput");
        lastName2EditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.lastName2}", String.class));
        LengthValidator lastName2EditInputValidator = new LengthValidator();
        lastName2EditInputValidator.setMinimum(1);
        lastName2EditInputValidator.setMaximum(50);
        lastName2EditInput.addValidator(lastName2EditInputValidator);
        lastName2EditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(lastName2EditInput);
        
        Message lastName2EditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        lastName2EditInputMessage.setId("lastName2EditInputMessage");
        lastName2EditInputMessage.setFor("lastName2EditInput");
        lastName2EditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(lastName2EditInputMessage);
        
        OutputLabel birthDateEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        birthDateEditOutput.setFor("birthDateEditInput");
        birthDateEditOutput.setId("birthDateEditOutput");
        birthDateEditOutput.setValue("Birth Date:");
        htmlPanelGrid.getChildren().add(birthDateEditOutput);
        
        Calendar birthDateEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        birthDateEditInput.setId("birthDateEditInput");
        birthDateEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.birthDate}", Date.class));
        birthDateEditInput.setNavigator(true);
        birthDateEditInput.setEffect("slideDown");
        birthDateEditInput.setPattern("dd/MM/yyyy");
        birthDateEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(birthDateEditInput);
        
        Message birthDateEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        birthDateEditInputMessage.setId("birthDateEditInputMessage");
        birthDateEditInputMessage.setFor("birthDateEditInput");
        birthDateEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(birthDateEditInputMessage);
        
        OutputLabel nationalityEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nationalityEditOutput.setFor("nationalityEditInput");
        nationalityEditOutput.setId("nationalityEditOutput");
        nationalityEditOutput.setValue("Nationality:");
        htmlPanelGrid.getChildren().add(nationalityEditOutput);
        
        AutoComplete nationalityEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        nationalityEditInput.setId("nationalityEditInput");
        nationalityEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.nationality}", CountryEnum.class));
        nationalityEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeNationality}", List.class, new Class[] { String.class }));
        nationalityEditInput.setDropdown(true);
        nationalityEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nationalityEditInput);
        
        Message nationalityEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nationalityEditInputMessage.setId("nationalityEditInputMessage");
        nationalityEditInputMessage.setFor("nationalityEditInput");
        nationalityEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nationalityEditInputMessage);
        
        OutputLabel nIFEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nIFEditOutput.setFor("nIFEditInput");
        nIFEditOutput.setId("nIFEditOutput");
        nIFEditOutput.setValue("N I F:");
        htmlPanelGrid.getChildren().add(nIFEditOutput);
        
        InputText nIFEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nIFEditInput.setId("nIFEditInput");
        nIFEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.nIF}", String.class));
        LengthValidator nIFEditInputValidator = new LengthValidator();
        nIFEditInputValidator.setMinimum(9);
        nIFEditInputValidator.setMaximum(15);
        nIFEditInput.addValidator(nIFEditInputValidator);
        RegexValidator nIFEditInputRegexValidator = new RegexValidator();
        nIFEditInputRegexValidator.setPattern("([X-Z]{1}\\d{7}[A-Z]{1})|(\\d{8}[A-Z]{1})");
        nIFEditInput.addValidator(nIFEditInputRegexValidator);
        nIFEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nIFEditInput);
        
        Message nIFEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nIFEditInputMessage.setId("nIFEditInputMessage");
        nIFEditInputMessage.setFor("nIFEditInput");
        nIFEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nIFEditInputMessage);
        
        OutputLabel photoFileEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        photoFileEditOutput.setFor("photoFileEditInput");
        photoFileEditOutput.setId("photoFileEditOutput");
        photoFileEditOutput.setValue("Photo File:");
        htmlPanelGrid.getChildren().add(photoFileEditOutput);
        
        FileUpload photoFileEditInput = (FileUpload) application.createComponent(FileUpload.COMPONENT_TYPE);
        photoFileEditInput.setId("photoFileEditInput");
        photoFileEditInput.setFileUploadListener(expressionFactory.createMethodExpression(elContext, "#{personBean.handleFileUploadForPhotoFile}", void.class, new Class[] { FileUploadEvent.class }));
        photoFileEditInput.setMode("advanced");
        photoFileEditInput.setAllowTypes("/(\\.|\\/)([jJ][pP][gG]|[jJ][pP][eE][gG])$/");
        photoFileEditInput.setUpdate(":growlForm:growl");
        photoFileEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(photoFileEditInput);
        
        Message photoFileEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        photoFileEditInputMessage.setId("photoFileEditInputMessage");
        photoFileEditInputMessage.setFor("photoFileEditInput");
        photoFileEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(photoFileEditInputMessage);
        
        OutputLabel phoneEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        phoneEditOutput.setFor("phoneEditInput");
        phoneEditOutput.setId("phoneEditOutput");
        phoneEditOutput.setValue("Phone:");
        htmlPanelGrid.getChildren().add(phoneEditOutput);
        
        InputText phoneEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        phoneEditInput.setId("phoneEditInput");
        phoneEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.phone}", String.class));
        LengthValidator phoneEditInputValidator = new LengthValidator();
        phoneEditInputValidator.setMinimum(3);
        phoneEditInputValidator.setMaximum(15);
        phoneEditInput.addValidator(phoneEditInputValidator);
        RegexValidator phoneEditInputRegexValidator = new RegexValidator();
        phoneEditInputRegexValidator.setPattern(".*\\d.*");
        phoneEditInput.addValidator(phoneEditInputRegexValidator);
        phoneEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(phoneEditInput);
        
        Message phoneEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        phoneEditInputMessage.setId("phoneEditInputMessage");
        phoneEditInputMessage.setFor("phoneEditInput");
        phoneEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(phoneEditInputMessage);
        
        OutputLabel questionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        questionEditOutput.setFor("questionEditInput");
        questionEditOutput.setId("questionEditOutput");
        questionEditOutput.setValue("Question:");
        htmlPanelGrid.getChildren().add(questionEditOutput);
        
        AutoComplete questionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        questionEditInput.setId("questionEditInput");
        questionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.question}", SemanticQuestionEnum.class));
        questionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completeQuestion}", List.class, new Class[] { String.class }));
        questionEditInput.setDropdown(true);
        questionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(questionEditInput);
        
        Message questionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        questionEditInputMessage.setId("questionEditInputMessage");
        questionEditInputMessage.setFor("questionEditInput");
        questionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(questionEditInputMessage);
        
        OutputLabel responseEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responseEditOutput.setFor("responseEditInput");
        responseEditOutput.setId("responseEditOutput");
        responseEditOutput.setValue("Response:");
        htmlPanelGrid.getChildren().add(responseEditOutput);
        
        InputTextarea responseEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        responseEditInput.setId("responseEditInput");
        responseEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.response}", String.class));
        LengthValidator responseEditInputValidator = new LengthValidator();
        responseEditInputValidator.setMinimum(3);
        responseEditInputValidator.setMaximum(100);
        responseEditInput.addValidator(responseEditInputValidator);
        responseEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(responseEditInput);
        
        Message responseEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responseEditInputMessage.setId("responseEditInputMessage");
        responseEditInputMessage.setFor("responseEditInput");
        responseEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responseEditInputMessage);
        
        OutputLabel alternateQuestionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        alternateQuestionEditOutput.setFor("alternateQuestionEditInput");
        alternateQuestionEditOutput.setId("alternateQuestionEditOutput");
        alternateQuestionEditOutput.setValue("Alternate Question:");
        htmlPanelGrid.getChildren().add(alternateQuestionEditOutput);
        
        InputTextarea alternateQuestionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        alternateQuestionEditInput.setId("alternateQuestionEditInput");
        alternateQuestionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.alternateQuestion}", String.class));
        LengthValidator alternateQuestionEditInputValidator = new LengthValidator();
        alternateQuestionEditInputValidator.setMinimum(3);
        alternateQuestionEditInputValidator.setMaximum(100);
        alternateQuestionEditInput.addValidator(alternateQuestionEditInputValidator);
        alternateQuestionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(alternateQuestionEditInput);
        
        Message alternateQuestionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        alternateQuestionEditInputMessage.setId("alternateQuestionEditInputMessage");
        alternateQuestionEditInputMessage.setFor("alternateQuestionEditInput");
        alternateQuestionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(alternateQuestionEditInputMessage);
        
        OutputLabel alternateResponseEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        alternateResponseEditOutput.setFor("alternateResponseEditInput");
        alternateResponseEditOutput.setId("alternateResponseEditOutput");
        alternateResponseEditOutput.setValue("Alternate Response:");
        htmlPanelGrid.getChildren().add(alternateResponseEditOutput);
        
        InputTextarea alternateResponseEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        alternateResponseEditInput.setId("alternateResponseEditInput");
        alternateResponseEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.alternateResponse}", String.class));
        LengthValidator alternateResponseEditInputValidator = new LengthValidator();
        alternateResponseEditInputValidator.setMinimum(3);
        alternateResponseEditInputValidator.setMaximum(100);
        alternateResponseEditInput.addValidator(alternateResponseEditInputValidator);
        alternateResponseEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(alternateResponseEditInput);
        
        Message alternateResponseEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        alternateResponseEditInputMessage.setId("alternateResponseEditInputMessage");
        alternateResponseEditInputMessage.setFor("alternateResponseEditInput");
        alternateResponseEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(alternateResponseEditInputMessage);
        
        OutputLabel principalEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        principalEditOutput.setFor("principalEditInput");
        principalEditOutput.setId("principalEditOutput");
        principalEditOutput.setValue("Principal:");
        htmlPanelGrid.getChildren().add(principalEditOutput);
        
        AutoComplete principalEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        principalEditInput.setId("principalEditInput");
        principalEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.principal}", Principal.class));
        principalEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{personBean.completePrincipal}", List.class, new Class[] { String.class }));
        principalEditInput.setDropdown(true);
        principalEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "principal", String.class));
        principalEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{principal.userName} #{principal.password} #{principal.activationKey}", String.class));
        principalEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{principal}", Principal.class));
        principalEditInput.setConverter(new PrincipalConverter());
        principalEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(principalEditInput);
        
        Message principalEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        principalEditInputMessage.setId("principalEditInputMessage");
        principalEditInputMessage.setFor("principalEditInput");
        principalEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(principalEditInputMessage);
        
        OutputLabel addressesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        addressesEditOutput.setFor("addressesEditInput");
        addressesEditOutput.setId("addressesEditOutput");
        addressesEditOutput.setValue("Addresses:");
        htmlPanelGrid.getChildren().add(addressesEditOutput);
        
        InputText addressesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        addressesEditInput.setId("addressesEditInput");
        addressesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.addresses}", List.class));
        addressesEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(addressesEditInput);
        
        Message addressesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        addressesEditInputMessage.setId("addressesEditInputMessage");
        addressesEditInputMessage.setFor("addressesEditInput");
        addressesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(addressesEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PersonBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText firstNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        firstNameLabel.setId("firstNameLabel");
        firstNameLabel.setValue("First Name:");
        htmlPanelGrid.getChildren().add(firstNameLabel);
        
        InputTextarea firstNameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        firstNameValue.setId("firstNameValue");
        firstNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.firstName}", String.class));
        firstNameValue.setReadonly(true);
        firstNameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(firstNameValue);
        
        HtmlOutputText lastNameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastNameLabel.setId("lastNameLabel");
        lastNameLabel.setValue("Last Name:");
        htmlPanelGrid.getChildren().add(lastNameLabel);
        
        InputTextarea lastNameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        lastNameValue.setId("lastNameValue");
        lastNameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.lastName}", String.class));
        lastNameValue.setReadonly(true);
        lastNameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(lastNameValue);
        
        HtmlOutputText lastName2Label = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        lastName2Label.setId("lastName2Label");
        lastName2Label.setValue("Last Name2:");
        htmlPanelGrid.getChildren().add(lastName2Label);
        
        InputTextarea lastName2Value = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        lastName2Value.setId("lastName2Value");
        lastName2Value.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.lastName2}", String.class));
        lastName2Value.setReadonly(true);
        lastName2Value.setDisabled(true);
        htmlPanelGrid.getChildren().add(lastName2Value);
        
        HtmlOutputText birthDateLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        birthDateLabel.setId("birthDateLabel");
        birthDateLabel.setValue("Birth Date:");
        htmlPanelGrid.getChildren().add(birthDateLabel);
        
        HtmlOutputText birthDateValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        birthDateValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.birthDate}", Date.class));
        DateTimeConverter birthDateValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        birthDateValueConverter.setPattern("dd/MM/yyyy");
        birthDateValue.setConverter(birthDateValueConverter);
        htmlPanelGrid.getChildren().add(birthDateValue);
        
        HtmlOutputText nationalityLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityLabel.setId("nationalityLabel");
        nationalityLabel.setValue("Nationality:");
        htmlPanelGrid.getChildren().add(nationalityLabel);
        
        HtmlOutputText nationalityValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nationalityValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.nationality}", String.class));
        htmlPanelGrid.getChildren().add(nationalityValue);
        
        HtmlOutputText nIFLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nIFLabel.setId("nIFLabel");
        nIFLabel.setValue("N I F:");
        htmlPanelGrid.getChildren().add(nIFLabel);
        
        HtmlOutputText nIFValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nIFValue.setId("nIFValue");
        nIFValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.nIF}", String.class));
        htmlPanelGrid.getChildren().add(nIFValue);
        
        HtmlOutputText photoFileLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        photoFileLabel.setId("photoFileLabel");
        photoFileLabel.setValue("Photo File:");
        htmlPanelGrid.getChildren().add(photoFileLabel);
        
        UIComponent photoFileValue;
        if (person != null && person.getPhotoFile() != null && person.getPhotoFile().length > 0) {
            photoFileValue = (CommandButton) application.createComponent(CommandButton.COMPONENT_TYPE);
            ((CommandButton) photoFileValue).addActionListener(new FileDownloadActionListener(expressionFactory.createValueExpression(elContext, "#{personBean.photoFileStreamedContent}", StreamedContent.class), null));
            ((CommandButton) photoFileValue).setValue("Download");
            ((CommandButton) photoFileValue).setAjax(false);
        } else {
            photoFileValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
            ((HtmlOutputText) photoFileValue).setValue("");
        }
        htmlPanelGrid.getChildren().add(photoFileValue);
        
        HtmlOutputText phoneLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phoneLabel.setId("phoneLabel");
        phoneLabel.setValue("Phone:");
        htmlPanelGrid.getChildren().add(phoneLabel);
        
        HtmlOutputText phoneValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        phoneValue.setId("phoneValue");
        phoneValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.phone}", String.class));
        htmlPanelGrid.getChildren().add(phoneValue);
        
        HtmlOutputText questionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionLabel.setId("questionLabel");
        questionLabel.setValue("Question:");
        htmlPanelGrid.getChildren().add(questionLabel);
        
        HtmlOutputText questionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.question}", String.class));
        htmlPanelGrid.getChildren().add(questionValue);
        
        HtmlOutputText responseLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        responseLabel.setId("responseLabel");
        responseLabel.setValue("Response:");
        htmlPanelGrid.getChildren().add(responseLabel);
        
        InputTextarea responseValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        responseValue.setId("responseValue");
        responseValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.response}", String.class));
        responseValue.setReadonly(true);
        responseValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(responseValue);
        
        HtmlOutputText alternateQuestionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        alternateQuestionLabel.setId("alternateQuestionLabel");
        alternateQuestionLabel.setValue("Alternate Question:");
        htmlPanelGrid.getChildren().add(alternateQuestionLabel);
        
        InputTextarea alternateQuestionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        alternateQuestionValue.setId("alternateQuestionValue");
        alternateQuestionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.alternateQuestion}", String.class));
        alternateQuestionValue.setReadonly(true);
        alternateQuestionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(alternateQuestionValue);
        
        HtmlOutputText alternateResponseLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        alternateResponseLabel.setId("alternateResponseLabel");
        alternateResponseLabel.setValue("Alternate Response:");
        htmlPanelGrid.getChildren().add(alternateResponseLabel);
        
        InputTextarea alternateResponseValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        alternateResponseValue.setId("alternateResponseValue");
        alternateResponseValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.alternateResponse}", String.class));
        alternateResponseValue.setReadonly(true);
        alternateResponseValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(alternateResponseValue);
        
        HtmlOutputText principalLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        principalLabel.setId("principalLabel");
        principalLabel.setValue("Principal:");
        htmlPanelGrid.getChildren().add(principalLabel);
        
        HtmlOutputText principalValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        principalValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.principal}", Principal.class));
        principalValue.setConverter(new PrincipalConverter());
        htmlPanelGrid.getChildren().add(principalValue);
        
        HtmlOutputText addressesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressesLabel.setId("addressesLabel");
        addressesLabel.setValue("Addresses:");
        htmlPanelGrid.getChildren().add(addressesLabel);
        
        HtmlOutputText addressesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        addressesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{personBean.person.addresses}", String.class));
        htmlPanelGrid.getChildren().add(addressesValue);
        
        return htmlPanelGrid;
    }
    
    public Person PersonBean.getPerson() {
        if (person == null) {
            person = new Person();
        }
        return person;
    }
    
    public void PersonBean.setPerson(Person person) {
        this.person = person;
    }
    
    public List<CountryEnum> PersonBean.completeNationality(String query) {
        List<CountryEnum> suggestions = new ArrayList<CountryEnum>();
        for (CountryEnum countryEnum : CountryEnum.values()) {
            if (countryEnum.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(countryEnum);
            }
        }
        return suggestions;
    }
    
    public void PersonBean.handleFileUploadForPhotoFile(FileUploadEvent event) {
        person.setPhotoFile(event.getFile().getContents());
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_uploaded", event.getFile().getFileName());
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
    }
    
    public StreamedContent PersonBean.getPhotoFileStreamedContent() {
        if (person != null && person.getPhotoFile() != null) {
            return new DefaultStreamedContent(new ByteArrayInputStream(person.getPhotoFile()), "image/jpeg", "photoFile.jpg");
        }
        return new DefaultStreamedContent(new ByteArrayInputStream("".getBytes()));
    }
    
    public List<SemanticQuestionEnum> PersonBean.completeQuestion(String query) {
        List<SemanticQuestionEnum> suggestions = new ArrayList<SemanticQuestionEnum>();
        for (SemanticQuestionEnum semanticQuestionEnum : SemanticQuestionEnum.values()) {
            if (semanticQuestionEnum.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(semanticQuestionEnum);
            }
        }
        return suggestions;
    }
    
    public List<Principal> PersonBean.completePrincipal(String query) {
        List<Principal> suggestions = new ArrayList<Principal>();
        for (Principal principal : principalService.findAllPrincipals()) {
            String principalStr = String.valueOf(principal.getUserName() +  " "  + principal.getPassword() +  " "  + principal.getActivationKey());
            if (principalStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(principal);
            }
        }
        return suggestions;
    }
    
    public String PersonBean.onEdit() {
        return null;
    }
    
    public boolean PersonBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PersonBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PersonBean.displayList() {
        createDialogVisible = false;
        findAllPeople();
        return "person";
    }
    
    public String PersonBean.displayCreateDialog() {
        person = new Person();
        createDialogVisible = true;
        return "person";
    }
    
    public String PersonBean.persist() {
        String message = "";
        if (person.getId() != null) {
            personService.updatePerson(person);
            message = "message_successfully_updated";
        } else {
            personService.savePerson(person);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Person");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPeople();
    }
    
    public String PersonBean.delete() {
        personService.deletePerson(person);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Person");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPeople();
    }
    
    public void PersonBean.reset() {
        person = null;
        createDialogVisible = false;
    }
    
    public void PersonBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
