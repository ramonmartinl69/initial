// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.myorg.initial.roo.ui.web.mvc.controller.security;

import java.util.Set;
import org.myorg.initial.roo.core.domain.security.AuthRole;
import org.myorg.initial.roo.core.domain.security.Principal;
import org.myorg.initial.roo.ui.web.mvc.controller.security.PrincipalController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect PrincipalController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByActivationKeyEquals", "form" }, method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByActivationKeyEqualsForm(Model uiModel) {
        return "principals/findPrincipalsByActivationKeyEquals";
    }
    
    @RequestMapping(params = "find=ByActivationKeyEquals", method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByActivationKeyEquals(@RequestParam("activationKey") String activationKey, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("principals", Principal.findPrincipalsByActivationKeyEquals(activationKey, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Principal.countFindPrincipalsByActivationKeyEquals(activationKey) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("principals", Principal.findPrincipalsByActivationKeyEquals(activationKey, sortFieldName, sortOrder).getResultList());
        }
        return "principals/list";
    }
    
    @RequestMapping(params = { "find=ByEnabledNot", "form" }, method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByEnabledNotForm(Model uiModel) {
        return "principals/findPrincipalsByEnabledNot";
    }
    
    @RequestMapping(params = "find=ByEnabledNot", method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByEnabledNot(@RequestParam(value = "enabled", required = false) Boolean enabled, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("principals", Principal.findPrincipalsByEnabledNot(enabled == null ? Boolean.FALSE : enabled, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Principal.countFindPrincipalsByEnabledNot(enabled == null ? Boolean.FALSE : enabled) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("principals", Principal.findPrincipalsByEnabledNot(enabled == null ? Boolean.FALSE : enabled, sortFieldName, sortOrder).getResultList());
        }
        return "principals/list";
    }
    
    @RequestMapping(params = { "find=ByRoles", "form" }, method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByRolesForm(Model uiModel) {
        uiModel.addAttribute("authroles", AuthRole.findAllAuthRoles());
        return "principals/findPrincipalsByRoles";
    }
    
    @RequestMapping(params = "find=ByRoles", method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByRoles(@RequestParam("roles") Set<AuthRole> roles, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("principals", Principal.findPrincipalsByRoles(roles, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Principal.countFindPrincipalsByRoles(roles) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("principals", Principal.findPrincipalsByRoles(roles, sortFieldName, sortOrder).getResultList());
        }
        return "principals/list";
    }
    
    @RequestMapping(params = { "find=ByUserNameEquals", "form" }, method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByUserNameEqualsForm(Model uiModel) {
        return "principals/findPrincipalsByUserNameEquals";
    }
    
    @RequestMapping(params = "find=ByUserNameEquals", method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByUserNameEquals(@RequestParam("userName") String userName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("principals", Principal.findPrincipalsByUserNameEquals(userName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Principal.countFindPrincipalsByUserNameEquals(userName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("principals", Principal.findPrincipalsByUserNameEquals(userName, sortFieldName, sortOrder).getResultList());
        }
        return "principals/list";
    }
    
    @RequestMapping(params = { "find=ByUserNameIsNotNull", "form" }, method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByUserNameIsNotNullForm() {
        return "principals/findPrincipalsByUserNameIsNotNull";
    }
    
    @RequestMapping(params = "find=ByUserNameIsNotNull", method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByUserNameIsNotNull(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("principals", Principal.findPrincipalsByUserNameIsNotNull(sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Principal.countFindPrincipalsByUserNameIsNotNull() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("principals", Principal.findPrincipalsByUserNameIsNotNull(sortFieldName, sortOrder).getResultList());
        }
        return "principals/list";
    }
    
    @RequestMapping(params = { "find=ByUserNameIsNull", "form" }, method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByUserNameIsNullForm() {
        return "principals/findPrincipalsByUserNameIsNull";
    }
    
    @RequestMapping(params = "find=ByUserNameIsNull", method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByUserNameIsNull(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("principals", Principal.findPrincipalsByUserNameIsNull(sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Principal.countFindPrincipalsByUserNameIsNull() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("principals", Principal.findPrincipalsByUserNameIsNull(sortFieldName, sortOrder).getResultList());
        }
        return "principals/list";
    }
    
    @RequestMapping(params = { "find=ByUserNameLike", "form" }, method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByUserNameLikeForm(Model uiModel) {
        return "principals/findPrincipalsByUserNameLike";
    }
    
    @RequestMapping(params = "find=ByUserNameLike", method = RequestMethod.GET)
    public String PrincipalController.findPrincipalsByUserNameLike(@RequestParam("userName") String userName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("principals", Principal.findPrincipalsByUserNameLike(userName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) Principal.countFindPrincipalsByUserNameLike(userName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("principals", Principal.findPrincipalsByUserNameLike(userName, sortFieldName, sortOrder).getResultList());
        }
        return "principals/list";
    }
    
}
