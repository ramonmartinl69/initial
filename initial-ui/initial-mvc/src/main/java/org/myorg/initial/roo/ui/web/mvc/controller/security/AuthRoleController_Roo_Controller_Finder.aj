// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.myorg.initial.roo.ui.web.mvc.controller.security;

import org.myorg.initial.roo.core.domain.reference.SecurityRoleEnum;
import org.myorg.initial.roo.core.domain.security.AuthRole;
import org.myorg.initial.roo.ui.web.mvc.controller.security.AuthRoleController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect AuthRoleController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByAuthority", "form" }, method = RequestMethod.GET)
    public String AuthRoleController.findAuthRolesByAuthorityForm(Model uiModel) {
        uiModel.addAttribute("securityroleenums", java.util.Arrays.asList(SecurityRoleEnum.class.getEnumConstants()));
        return "roles/findAuthRolesByAuthority";
    }
    
    @RequestMapping(params = "find=ByAuthority", method = RequestMethod.GET)
    public String AuthRoleController.findAuthRolesByAuthority(@RequestParam("authority") SecurityRoleEnum authority, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("authroles", AuthRole.findAuthRolesByAuthority(authority, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) AuthRole.countFindAuthRolesByAuthority(authority) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("authroles", AuthRole.findAuthRolesByAuthority(authority, sortFieldName, sortOrder).getResultList());
        }
        return "roles/list";
    }
    
    @RequestMapping(params = { "find=ByRoleNameLike", "form" }, method = RequestMethod.GET)
    public String AuthRoleController.findAuthRolesByRoleNameLikeForm(Model uiModel) {
        return "roles/findAuthRolesByRoleNameLike";
    }
    
    @RequestMapping(params = "find=ByRoleNameLike", method = RequestMethod.GET)
    public String AuthRoleController.findAuthRolesByRoleNameLike(@RequestParam("roleName") String roleName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("authroles", AuthRole.findAuthRolesByRoleNameLike(roleName, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) AuthRole.countFindAuthRolesByRoleNameLike(roleName) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("authroles", AuthRole.findAuthRolesByRoleNameLike(roleName, sortFieldName, sortOrder).getResultList());
        }
        return "roles/list";
    }
    
}
