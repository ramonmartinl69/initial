// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.myorg.initial.roo.core.domain.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.myorg.initial.roo.core.domain.model.Person;

privileged aspect Person_Roo_Finder {
    
    public static Long Person.countFindPeopleByFirstNameLikeAndLastNameLike(String firstName, String lastName) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        firstName = firstName.replace('*', '%');
        if (firstName.charAt(0) != '%') {
            firstName = "%" + firstName;
        }
        if (firstName.charAt(firstName.length() - 1) != '%') {
            firstName = firstName + "%";
        }
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = Person.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Person AS o WHERE LOWER(o.firstName) LIKE LOWER(:firstName)  AND LOWER(o.lastName) LIKE LOWER(:lastName)", Long.class);
        q.setParameter("firstName", firstName);
        q.setParameter("lastName", lastName);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Person.countFindPeopleByNIFLike(String nIF) {
        if (nIF == null || nIF.length() == 0) throw new IllegalArgumentException("The nIF argument is required");
        nIF = nIF.replace('*', '%');
        if (nIF.charAt(0) != '%') {
            nIF = "%" + nIF;
        }
        if (nIF.charAt(nIF.length() - 1) != '%') {
            nIF = nIF + "%";
        }
        EntityManager em = Person.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Person AS o WHERE LOWER(o.nIF) LIKE LOWER(:nIF)", Long.class);
        q.setParameter("nIF", nIF);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Person> Person.findPeopleByFirstNameLikeAndLastNameLike(String firstName, String lastName) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        firstName = firstName.replace('*', '%');
        if (firstName.charAt(0) != '%') {
            firstName = "%" + firstName;
        }
        if (firstName.charAt(firstName.length() - 1) != '%') {
            firstName = firstName + "%";
        }
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE LOWER(o.firstName) LIKE LOWER(:firstName)  AND LOWER(o.lastName) LIKE LOWER(:lastName)", Person.class);
        q.setParameter("firstName", firstName);
        q.setParameter("lastName", lastName);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByFirstNameLikeAndLastNameLike(String firstName, String lastName, String sortFieldName, String sortOrder) {
        if (firstName == null || firstName.length() == 0) throw new IllegalArgumentException("The firstName argument is required");
        firstName = firstName.replace('*', '%');
        if (firstName.charAt(0) != '%') {
            firstName = "%" + firstName;
        }
        if (firstName.charAt(firstName.length() - 1) != '%') {
            firstName = firstName + "%";
        }
        if (lastName == null || lastName.length() == 0) throw new IllegalArgumentException("The lastName argument is required");
        lastName = lastName.replace('*', '%');
        if (lastName.charAt(0) != '%') {
            lastName = "%" + lastName;
        }
        if (lastName.charAt(lastName.length() - 1) != '%') {
            lastName = lastName + "%";
        }
        EntityManager em = Person.entityManager();
        String jpaQuery = "SELECT o FROM Person AS o WHERE LOWER(o.firstName) LIKE LOWER(:firstName)  AND LOWER(o.lastName) LIKE LOWER(:lastName)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Person> q = em.createQuery(jpaQuery, Person.class);
        q.setParameter("firstName", firstName);
        q.setParameter("lastName", lastName);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByNIFLike(String nIF) {
        if (nIF == null || nIF.length() == 0) throw new IllegalArgumentException("The nIF argument is required");
        nIF = nIF.replace('*', '%');
        if (nIF.charAt(0) != '%') {
            nIF = "%" + nIF;
        }
        if (nIF.charAt(nIF.length() - 1) != '%') {
            nIF = nIF + "%";
        }
        EntityManager em = Person.entityManager();
        TypedQuery<Person> q = em.createQuery("SELECT o FROM Person AS o WHERE LOWER(o.nIF) LIKE LOWER(:nIF)", Person.class);
        q.setParameter("nIF", nIF);
        return q;
    }
    
    public static TypedQuery<Person> Person.findPeopleByNIFLike(String nIF, String sortFieldName, String sortOrder) {
        if (nIF == null || nIF.length() == 0) throw new IllegalArgumentException("The nIF argument is required");
        nIF = nIF.replace('*', '%');
        if (nIF.charAt(0) != '%') {
            nIF = "%" + nIF;
        }
        if (nIF.charAt(nIF.length() - 1) != '%') {
            nIF = nIF + "%";
        }
        EntityManager em = Person.entityManager();
        String jpaQuery = "SELECT o FROM Person AS o WHERE LOWER(o.nIF) LIKE LOWER(:nIF)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Person> q = em.createQuery(jpaQuery, Person.class);
        q.setParameter("nIF", nIF);
        return q;
    }
    
}
