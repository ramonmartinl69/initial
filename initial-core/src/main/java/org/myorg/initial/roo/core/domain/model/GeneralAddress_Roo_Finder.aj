// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.myorg.initial.roo.core.domain.model;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.myorg.initial.roo.core.domain.model.GeneralAddress;
import org.myorg.initial.roo.core.domain.model.Person;

privileged aspect GeneralAddress_Roo_Finder {
    
    public static Long GeneralAddress.countFindGeneralAddressesByAddressLike(String address) {
        if (address == null || address.length() == 0) throw new IllegalArgumentException("The address argument is required");
        EntityManager em = GeneralAddress.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM GeneralAddress AS o WHERE LOWER(o.address) LIKE LOWER(:address)", Long.class);
        q.setParameter("address", address);
        return ((Long) q.getSingleResult());
    }
    
    public static Long GeneralAddress.countFindGeneralAddressesByPerson(Person person) {
        if (person == null) throw new IllegalArgumentException("The person argument is required");
        EntityManager em = GeneralAddress.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM GeneralAddress AS o WHERE o.person = :person", Long.class);
        q.setParameter("person", person);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<GeneralAddress> GeneralAddress.findGeneralAddressesByAddressLike(String address) {
        if (address == null || address.length() == 0) throw new IllegalArgumentException("The address argument is required");
        EntityManager em = GeneralAddress.entityManager();
        TypedQuery<GeneralAddress> q = em.createQuery("SELECT o FROM GeneralAddress AS o WHERE LOWER(o.address) LIKE LOWER(:address)", GeneralAddress.class);
        q.setParameter("address", address);
        return q;
    }
    
    public static TypedQuery<GeneralAddress> GeneralAddress.findGeneralAddressesByAddressLike(String address, String sortFieldName, String sortOrder) {
        if (address == null || address.length() == 0) throw new IllegalArgumentException("The address argument is required");
        EntityManager em = GeneralAddress.entityManager();
        String jpaQuery = "SELECT o FROM GeneralAddress AS o WHERE LOWER(o.address) LIKE LOWER(:address)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<GeneralAddress> q = em.createQuery(jpaQuery, GeneralAddress.class);
        q.setParameter("address", address);
        return q;
    }
    
    public static TypedQuery<GeneralAddress> GeneralAddress.findGeneralAddressesByPerson(Person person) {
        if (person == null) throw new IllegalArgumentException("The person argument is required");
        EntityManager em = GeneralAddress.entityManager();
        TypedQuery<GeneralAddress> q = em.createQuery("SELECT o FROM GeneralAddress AS o WHERE o.person = :person", GeneralAddress.class);
        q.setParameter("person", person);
        return q;
    }
    
    public static TypedQuery<GeneralAddress> GeneralAddress.findGeneralAddressesByPerson(Person person, String sortFieldName, String sortOrder) {
        if (person == null) throw new IllegalArgumentException("The person argument is required");
        EntityManager em = GeneralAddress.entityManager();
        String jpaQuery = "SELECT o FROM GeneralAddress AS o WHERE o.person = :person";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<GeneralAddress> q = em.createQuery(jpaQuery, GeneralAddress.class);
        q.setParameter("person", person);
        return q;
    }
    
}
