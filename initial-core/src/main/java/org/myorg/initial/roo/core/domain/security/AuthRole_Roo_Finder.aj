// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.myorg.initial.roo.core.domain.security;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.myorg.initial.roo.core.domain.reference.SecurityRoleEnum;
import org.myorg.initial.roo.core.domain.security.AuthRole;

privileged aspect AuthRole_Roo_Finder {
    
    public static Long AuthRole.countFindAuthRolesByAuthority(SecurityRoleEnum authority) {
        if (authority == null) throw new IllegalArgumentException("The authority argument is required");
        EntityManager em = AuthRole.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AuthRole AS o WHERE o.authority = :authority", Long.class);
        q.setParameter("authority", authority);
        return ((Long) q.getSingleResult());
    }
    
    public static Long AuthRole.countFindAuthRolesByRoleNameLike(String roleName) {
        if (roleName == null || roleName.length() == 0) throw new IllegalArgumentException("The roleName argument is required");
        roleName = roleName.replace('*', '%');
        if (roleName.charAt(0) != '%') {
            roleName = "%" + roleName;
        }
        if (roleName.charAt(roleName.length() - 1) != '%') {
            roleName = roleName + "%";
        }
        EntityManager em = AuthRole.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AuthRole AS o WHERE LOWER(o.roleName) LIKE LOWER(:roleName)", Long.class);
        q.setParameter("roleName", roleName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<AuthRole> AuthRole.findAuthRolesByAuthority(SecurityRoleEnum authority) {
        if (authority == null) throw new IllegalArgumentException("The authority argument is required");
        EntityManager em = AuthRole.entityManager();
        TypedQuery<AuthRole> q = em.createQuery("SELECT o FROM AuthRole AS o WHERE o.authority = :authority", AuthRole.class);
        q.setParameter("authority", authority);
        return q;
    }
    
    public static TypedQuery<AuthRole> AuthRole.findAuthRolesByAuthority(SecurityRoleEnum authority, String sortFieldName, String sortOrder) {
        if (authority == null) throw new IllegalArgumentException("The authority argument is required");
        EntityManager em = AuthRole.entityManager();
        String jpaQuery = "SELECT o FROM AuthRole AS o WHERE o.authority = :authority";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<AuthRole> q = em.createQuery(jpaQuery, AuthRole.class);
        q.setParameter("authority", authority);
        return q;
    }
    
    public static TypedQuery<AuthRole> AuthRole.findAuthRolesByRoleNameLike(String roleName) {
        if (roleName == null || roleName.length() == 0) throw new IllegalArgumentException("The roleName argument is required");
        roleName = roleName.replace('*', '%');
        if (roleName.charAt(0) != '%') {
            roleName = "%" + roleName;
        }
        if (roleName.charAt(roleName.length() - 1) != '%') {
            roleName = roleName + "%";
        }
        EntityManager em = AuthRole.entityManager();
        TypedQuery<AuthRole> q = em.createQuery("SELECT o FROM AuthRole AS o WHERE LOWER(o.roleName) LIKE LOWER(:roleName)", AuthRole.class);
        q.setParameter("roleName", roleName);
        return q;
    }
    
    public static TypedQuery<AuthRole> AuthRole.findAuthRolesByRoleNameLike(String roleName, String sortFieldName, String sortOrder) {
        if (roleName == null || roleName.length() == 0) throw new IllegalArgumentException("The roleName argument is required");
        roleName = roleName.replace('*', '%');
        if (roleName.charAt(0) != '%') {
            roleName = "%" + roleName;
        }
        if (roleName.charAt(roleName.length() - 1) != '%') {
            roleName = roleName + "%";
        }
        EntityManager em = AuthRole.entityManager();
        String jpaQuery = "SELECT o FROM AuthRole AS o WHERE LOWER(o.roleName) LIKE LOWER(:roleName)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<AuthRole> q = em.createQuery(jpaQuery, AuthRole.class);
        q.setParameter("roleName", roleName);
        return q;
    }
    
}
